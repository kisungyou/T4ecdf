library(T4ecdf)
library(T4ecdf)
devtools::document()
library(T4ecdf)
library(T4ecdf)
library(T4ecdf)
library(T4ecdf)
## toy example
#  first list : 10 of random and uniform distributions
mylist1 = list()
for (i in 1:10){ mylist1[[i]] = stats::ecdf(stats::rnorm(50, sd=2))}
for (i in 11:20){mylist1[[i]] = stats::ecdf(stats::runif(50, min=-5))}
#  second list : 15 uniform and random distributions
mylist2 = list()
for (i in 1:15){ mylist2[[i]] = stats::ecdf(stats::runif(50, min=-5))}
for (i in 16:30){mylist2[[i]] = stats::ecdf(stats::rnorm(50, sd=2))}
## compute Kolmogorov-Smirnov distance
dm2ks = pdist2(mylist1, mylist2, type="KS")
dm2lp = pdist2(mylist1, mylist2, type="lp")
dm2wa = pdist2(mylist1, mylist2, type="wasserstein")
nrs   = nrow(dm2ks)
## visualize
opar = par(mfrow=c(1,3))
image(dm2ks[,nrs:1], axes=FALSE, main="Kolmogorov-Smirnov")
image(dm2lp[,nrs:1], axes=FALSE, main="L2")
image(dm2wa[,nrs:1], axes=FALSE, main="Wasserstein")
par(opar)
## toy example : 10 of random and uniform distributions
mylist = list()
for (i in 1:10){
mylist[[i]] = stats::ecdf(stats::rnorm(50, sd=2))
}
for (i in 11:20){
mylist[[i]] = stats::ecdf(stats::runif(50, min=-5))
}
## compute several distance measures
dk = pdist(mylist, type="KS")          # Kolmogorov-Smirnov
dl = pdist(mylist, type="Lp")          # L2
dw = pdist(mylist, type="Wasserstein") # 2-Wasserstein
## visualize
opar = par(mfrow=c(1,3), pty="s")
image(dk[,nrow(dk):1], axes=FALSE, main="Kolmogorov-Smirnov")
image(dl[,nrow(dl):1], axes=FALSE, main="L2")
image(dw[,nrow(dw):1], axes=FALSE, main="2-Wasserstein")
par(opar)
# generate data
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(c(rnorm(50, mean=-2), rnorm(50, mean=2)))
}
for (i in 11:20){
elist[[i]] = stats::ecdf(rgamma(100,1))
}
for (i in 21:30){
elist[[i]] = stats::ecdf(rgamma(50,1) + rnorm(50, mean=3))
}
# run EP-means with k clusters
# change the value below to see different settings
myk   = 2
epout = epmeans(elist, k=myk)
# visualize
opar = par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(epout$cluster==k)
for (i in 1:length(idk)){
if (i<2){
pm = paste("class ",k," (size=",length(idk),")",sep="")
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=pm)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
par(opar)
myk   = 3
epout = epmeans(elist, k=myk)
# visualize
opar = par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(epout$cluster==k)
for (i in 1:length(idk)){
if (i<2){
pm = paste("class ",k," (size=",length(idk),")",sep="")
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=pm)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
par(opar)
# generate data
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(c(rnorm(50, mean=-2), rnorm(50, mean=2)))
}
for (i in 11:20){
elist[[i]] = stats::ecdf(rgamma(100,1))
}
for (i in 21:30){
elist[[i]] = stats::ecdf(rgamma(50,1) + rnorm(50, mean=3))
}
# run EP-medoids with k clusters with k=2,3,4
ep2 = epmedoids(elist, k=2)
ep3 = epmedoids(elist, k=3)
ep4 = epmedoids(elist, k=4)
# 2d embedding using mds
dmat = SAME::pdist(elist, type="wasserstein", as.dist=TRUE)
ebd2 = stats::cmdscale(dmat, 2)
# visualize
opar = par(mfrow=c(1,3), pty="s")
plot(ebd2, col=ep2$cluster, main="k=2 medoids", pch=19)
plot(ebd2, col=ep3$cluster, main="k=3 medoids", pch=19)
plot(ebd2, col=ep4$cluster, main="k=4 medoids", pch=19)
par(opar)
dmat = T4ecdf::pdist(elist, type="wasserstein", as.dist=TRUE)
ebd2 = stats::cmdscale(dmat, 2)
# visualize
opar = par(mfrow=c(1,3), pty="s")
plot(ebd2, col=ep2$cluster, main="k=2 medoids", pch=19)
plot(ebd2, col=ep3$cluster, main="k=3 medoids", pch=19)
plot(ebd2, col=ep4$cluster, main="k=4 medoids", pch=19)
par(opar)
library(T4ecdf)
# change the value below to see different settings
epout = epmeans(elist, k=3)
# 2d embedding using mds
dmat = T4ecdf::pdist(elist, type="wasserstein", as.dist=TRUE)
ebd2 = stats::cmdscale(dmat, 2)
# visualize
opar = par(mfrow=c(2,3))
for (k in 1:myk){
idk = which(epout$cluster==k)
for (i in 1:length(idk)){
if (i<2){
pm = paste("class ",k," (size=",length(idk),")",sep="")
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=pm)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
par(opar)
library(T4ecdf)
# 2d embedding using mds
dmat = T4ecdf::pdist(elist, type="wasserstein", as.dist=TRUE)
ebd2 = stats::cmdscale(dmat, 2)
# visualize
opar = par(mfrow=c(2,3))
for (k in 1:myk){
idk = which(epout$cluster==k)
for (i in 1:length(idk)){
if (i<2){
pm = paste("class ",k," (size=",length(idk),")",sep="")
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=pm)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
plot(ebd2, col=ep2$cluster, main="k=2 means", pch=19)
plot(ebd2, col=ep3$cluster, main="k=3 means", pch=19)
plot(ebd2, col=ep4$cluster, main="k=4 means", pch=19)
par(opar)
library(T4ecdf)
# (1) run EP-medoids with k clusters with k=2,3,4
ep2 = epmedoids(elist, k=2)
ep3 = epmedoids(elist, k=3)
ep4 = epmedoids(elist, k=4)
# (2) run EP-medoids with k=3 clusters
epout = epmedoids(elist, k=3)
# 2d embedding using mds
dmat = T4ecdf::pdist(elist, type="wasserstein", as.dist=TRUE)
ebd2 = stats::cmdscale(dmat, 2)
# visualize
opar = par(mfrow=c(2,3))
for (k in 1:myk){
idk = which(epout$cluster==k)
for (i in 1:length(idk)){
if (i<2){
pm = paste("class ",k," (size=",length(idk),")",sep="")
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=pm)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
plot(ebd2, col=ep2$cluster, main="k=2 means", pch=19)
plot(ebd2, col=ep3$cluster, main="k=3 means", pch=19)
plot(ebd2, col=ep4$cluster, main="k=4 means", pch=19)
par(opar)
# visualize
opar = par(mfrow=c(2,3))
for (k in 1:myk){
idk = which(epout$cluster==k)
for (i in 1:length(idk)){
if (i<2){
pm = paste("class ",k," (size=",length(idk),")",sep="")
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=pm)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
plot(ebd2, col=ep2$cluster, main="k=2 medoids", pch=19)
plot(ebd2, col=ep3$cluster, main="k=3 medoids", pch=19)
plot(ebd2, col=ep4$cluster, main="k=4 medoids", pch=19)
par(opar)
library(T4ecdf)
#  (1) show histogram for three types of data
opar = par(mfrow=c(3,3))
hist(elist[[10]], main="mixture of 2 Gaussians")
hist(elist[[20]], main="single Gamma distribution")
hist(elist[[30]], main="mixture of Gaussian and Gamma")
#  (2) per-class ECDFs
for (k in 1:myk){
idk = which(epout$cluster==k)
for (i in 1:length(idk)){
if (i<2){
pm = paste("class ",k," (size=",length(idk),")",sep="")
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=pm)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
#  (3) 2d embedding colored class labels
plot(ebd2, col=ep2$cluster, main="k=2 means", pch=19)
plot(ebd2, col=ep3$cluster, main="k=3 means", pch=19)
plot(ebd2, col=ep4$cluster, main="k=4 means", pch=19)
par(opar)
elist[[10]]
ee = elist[[10]]
ee
as.double(ee)
help(ecdf)
hist(quantile(ee))
opar = par(mfrow=c(3,3))
plot(elist[[10]], main="mixture of 2 Gaussians")
plot(elist[[20]], main="single Gamma distribution")
plot(elist[[30]], main="mixture of Gaussian and Gamma")
plot(elist[[10]], cex=0.1, main="2 Gaussians")
graphics.off()
# generate data
myn   = 50
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(c(rnorm(myn, mean=-2), rnorm(myn, mean=2)))
}
for (i in 11:20){
elist[[i]] = stats::ecdf(rgamma(2*myn,1))
}
for (i in 21:30){
elist[[i]] = stats::ecdf(rgamma(myn,1) + rnorm(myn, mean=3))
}
# run EP-means with k clusters with k=2,3,4
ep2 = epmeans(elist, k=2)
ep3 = epmeans(elist, k=3)
ep4 = epmeans(elist, k=4)
# run EP-means with k=3 clusters
epout = epmeans(elist, k=3)
# 2d embedding using mds
dmat = T4ecdf::pdist(elist, type="wasserstein", as.dist=TRUE)
ebd2 = stats::cmdscale(dmat, 2)
## visualize
#  (1) show ECDF for three types of data
opar = par(mfrow=c(3,3))
plot(elist[[10]], cex=0.1, main="2 Gaussians")
plot(elist[[20]], cex=0.1, main="Gamma")
plot(elist[[30]], cex=0.1, main="Gaussian+Gamma")
#  (2) per-class ECDFs
for (k in 1:myk){
idk = which(epout$cluster==k)
for (i in 1:length(idk)){
if (i<2){
pm = paste("class ",k," (size=",length(idk),")",sep="")
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=pm)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
#  (3) 2d embedding colored class labels
plot(ebd2, col=ep2$cluster, main="k=2 means", pch=19)
plot(ebd2, col=ep3$cluster, main="k=3 means", pch=19)
plot(ebd2, col=ep4$cluster, main="k=4 means", pch=19)
par(opar)
## 3 sets of 1d samples, 10 each and add some noise
#    set 1 : mixture of two gaussians
#    set 2 : single gamma distribution
#    set 3 : mixture of gaussian and gamma
# generate data
myn   = 50
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(c(rnorm(myn, mean=-2), rnorm(myn, mean=2)))
}
for (i in 11:20){
elist[[i]] = stats::ecdf(rgamma(2*myn,1))
}
for (i in 21:30){
elist[[i]] = stats::ecdf(rgamma(myn,1) + rnorm(myn, mean=3))
}
# run EP-medoids with k clusters with k=2,3,4
ep2 = epmedoids(elist, k=2)
ep3 = epmedoids(elist, k=3)
ep4 = epmedoids(elist, k=4)
# run EP-medoids with k=3 clusters
epout = epmedoids(elist, k=3)
# 2d embedding using mds
dmat = T4ecdf::pdist(elist, type="wasserstein", as.dist=TRUE)
ebd2 = stats::cmdscale(dmat, 2)
## visualize
#  (1) show ECDF for three types of data
opar = par(mfrow=c(3,3))
plot(elist[[10]], cex=0.1, main="2 Gaussians")
plot(elist[[20]], cex=0.1, main="Gamma")
plot(elist[[30]], cex=0.1, main="Gaussian+Gamma")
#  (2) per-class ECDFs
for (k in 1:myk){
idk = which(epout$cluster==k)
for (i in 1:length(idk)){
if (i<2){
pm = paste("class ",k," (size=",length(idk),")",sep="")
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=pm)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
#  (3) 2d embedding colored class labels
plot(ebd2, col=ep2$cluster, main="k=2 means", pch=19)
plot(ebd2, col=ep3$cluster, main="k=3 means", pch=19)
plot(ebd2, col=ep4$cluster, main="k=4 means", pch=19)
par(opar)
library(T4ecdf)
## toy example : 10 of random and uniform distributions
mylist = list()
for (i in 1:10){
mylist[[i]] = stats::ecdf(stats::rnorm(50, sd=2))
}
for (i in 11:20){
mylist[[i]] = stats::ecdf(stats::runif(50, min=-5))
}
## compute several distance measures
dk = pdist(mylist, type="KS")          # Kolmogorov-Smirnov
dl = pdist(mylist, type="Lp")          # L2
dw = pdist(mylist, type="Wasserstein") # 2-Wasserstein
## visualize
opar = par(mfrow=c(1,3), pty="s")
image(dk[,nrow(dk):1], axes=FALSE, main="Kolmogorov-Smirnov")
image(dl[,nrow(dl):1], axes=FALSE, main="L2")
image(dw[,nrow(dw):1], axes=FALSE, main="2-Wasserstein")
par(opar)
graphics.off()
library(T4ecdf)
library(T4ecdf)
myn   = 50
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(c(rnorm(myn, mean=-2), rnorm(myn, mean=2)))
}
for (i in 11:20){
elist[[i]] = stats::ecdf(rgamma(2*myn,1))
}
for (i in 21:30){
elist[[i]] = stats::ecdf(rgamma(myn,1) + rnorm(myn, mean=3))
}
# run EP-hclust with 3 different methods and 2 distance metrics
eh2ks = ephclust(elist, method="single")
eh3ks = ephclust(elist, method="complete")
eh4ks = ephclust(elist, method="median")
eh2w2 = ephclust(elist, type="wasserstein", method="single")
eh3w2 = ephclust(elist, type="wasserstein", method="complete")
eh4w2 = ephclust(elist, type="wasserstein", method="median")
# visualize
opar = par(mfrow=c(2,3))
plot(eh2ks, main="KS+single")
plot(eh3ks, main="KS+complete")
plot(eh4ks, main="KS+median")
plot(eh2w2, main="2 Wasserstein+single")
plot(eh3w2, main="2 Wasserstein+complete")
plot(eh4w2, main="2 Wasserstein+median")
par(opar)
library(T4ecdf)
library(cluster)
help("silhouette")
data(ruspini)
pr4 <- pam(ruspini, 4)
si = silhouette(pr4)
si
library(T4ecdf)
library(T4ecdf)
library(T4ecdf)
library(T4ecdf)
